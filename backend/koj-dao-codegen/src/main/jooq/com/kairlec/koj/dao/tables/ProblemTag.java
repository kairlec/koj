/*
 * This file is generated by jOOQ.
 */
package com.kairlec.koj.dao.tables;


import com.kairlec.koj.dao.Indexes;
import com.kairlec.koj.dao.Keys;
import com.kairlec.koj.dao.Koj;
import com.kairlec.koj.dao.tables.records.ProblemTagRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 题目标签表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProblemTag extends TableImpl<ProblemTagRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>koj.problem_tag</code>
     */
    public static final ProblemTag PROBLEM_TAG = new ProblemTag();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProblemTagRecord> getRecordType() {
        return ProblemTagRecord.class;
    }

    /**
     * The column <code>koj.problem_tag.id</code>. 标签id
     */
    public final TableField<ProblemTagRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "标签id");

    /**
     * The column <code>koj.problem_tag.name</code>. 标签名
     */
    public final TableField<ProblemTagRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(64).nullable(false), this, "标签名");

    /**
     * The column <code>koj.problem_tag.create_time</code>. 创建时间
     */
    public final TableField<ProblemTagRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "创建时间");

    /**
     * The column <code>koj.problem_tag.update_time</code>. 更新时间
     */
    public final TableField<ProblemTagRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "更新时间");

    private ProblemTag(Name alias, Table<ProblemTagRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProblemTag(Name alias, Table<ProblemTagRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("题目标签表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>koj.problem_tag</code> table reference
     */
    public ProblemTag(String alias) {
        this(DSL.name(alias), PROBLEM_TAG);
    }

    /**
     * Create an aliased <code>koj.problem_tag</code> table reference
     */
    public ProblemTag(Name alias) {
        this(alias, PROBLEM_TAG);
    }

    /**
     * Create a <code>koj.problem_tag</code> table reference
     */
    public ProblemTag() {
        this(DSL.name("problem_tag"), null);
    }

    public <O extends Record> ProblemTag(Table<O> child, ForeignKey<O, ProblemTagRecord> key) {
        super(child, key, PROBLEM_TAG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Koj.KOJ;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PROBLEM_TAG_NAME_IDX);
    }

    @Override
    public Identity<ProblemTagRecord, Long> getIdentity() {
        return (Identity<ProblemTagRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ProblemTagRecord> getPrimaryKey() {
        return Keys.KEY_PROBLEM_TAG_PRIMARY;
    }

    @Override
    public ProblemTag as(String alias) {
        return new ProblemTag(DSL.name(alias), this);
    }

    @Override
    public ProblemTag as(Name alias) {
        return new ProblemTag(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProblemTag rename(String name) {
        return new ProblemTag(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProblemTag rename(Name name) {
        return new ProblemTag(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
