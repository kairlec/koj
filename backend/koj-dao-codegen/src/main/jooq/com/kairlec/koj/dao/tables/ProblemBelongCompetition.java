/*
 * This file is generated by jOOQ.
 */
package com.kairlec.koj.dao.tables;


import com.kairlec.koj.dao.Indexes;
import com.kairlec.koj.dao.Keys;
import com.kairlec.koj.dao.Koj;
import com.kairlec.koj.dao.tables.records.ProblemBelongCompetitionRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 题目和比赛关系表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProblemBelongCompetition extends TableImpl<ProblemBelongCompetitionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>koj.problem_belong_competition</code>
     */
    public static final ProblemBelongCompetition PROBLEM_BELONG_COMPETITION = new ProblemBelongCompetition();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProblemBelongCompetitionRecord> getRecordType() {
        return ProblemBelongCompetitionRecord.class;
    }

    /**
     * The column <code>koj.problem_belong_competition.idx</code>. 题目在比赛中的序号
     */
    public final TableField<ProblemBelongCompetitionRecord, Byte> IDX = createField(DSL.name("idx"), SQLDataType.TINYINT.nullable(false), this, "题目在比赛中的序号");

    /**
     * The column <code>koj.problem_belong_competition.problem_id</code>. 题目id
     */
    public final TableField<ProblemBelongCompetitionRecord, Long> PROBLEM_ID = createField(DSL.name("problem_id"), SQLDataType.BIGINT.nullable(false), this, "题目id");

    /**
     * The column <code>koj.problem_belong_competition.competition_id</code>.
     * 比赛id
     */
    public final TableField<ProblemBelongCompetitionRecord, Long> COMPETITION_ID = createField(DSL.name("competition_id"), SQLDataType.BIGINT.nullable(false), this, "比赛id");

    /**
     * The column <code>koj.problem_belong_competition.create_time</code>. 创建时间
     */
    public final TableField<ProblemBelongCompetitionRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "创建时间");

    /**
     * The column <code>koj.problem_belong_competition.update_time</code>. 更新时间
     */
    public final TableField<ProblemBelongCompetitionRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "更新时间");

    private ProblemBelongCompetition(Name alias, Table<ProblemBelongCompetitionRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProblemBelongCompetition(Name alias, Table<ProblemBelongCompetitionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("题目和比赛关系表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>koj.problem_belong_competition</code> table
     * reference
     */
    public ProblemBelongCompetition(String alias) {
        this(DSL.name(alias), PROBLEM_BELONG_COMPETITION);
    }

    /**
     * Create an aliased <code>koj.problem_belong_competition</code> table
     * reference
     */
    public ProblemBelongCompetition(Name alias) {
        this(alias, PROBLEM_BELONG_COMPETITION);
    }

    /**
     * Create a <code>koj.problem_belong_competition</code> table reference
     */
    public ProblemBelongCompetition() {
        this(DSL.name("problem_belong_competition"), null);
    }

    public <O extends Record> ProblemBelongCompetition(Table<O> child, ForeignKey<O, ProblemBelongCompetitionRecord> key) {
        super(child, key, PROBLEM_BELONG_COMPETITION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Koj.KOJ;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PROBLEM_BELONG_COMPETITION_COMPETITION_ID_IDX, Indexes.PROBLEM_BELONG_COMPETITION_PROBLEM_ID_IDX);
    }

    @Override
    public UniqueKey<ProblemBelongCompetitionRecord> getPrimaryKey() {
        return Keys.KEY_PROBLEM_BELONG_COMPETITION_PRIMARY;
    }

    @Override
    public List<ForeignKey<ProblemBelongCompetitionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PROBLEM_BELONG_COMPETITION_IBFK_1, Keys.PROBLEM_BELONG_COMPETITION_IBFK_2);
    }

    private transient Problem _problem;
    private transient Competition _competition;

    /**
     * Get the implicit join path to the <code>koj.problem</code> table.
     */
    public Problem problem() {
        if (_problem == null)
            _problem = new Problem(this, Keys.PROBLEM_BELONG_COMPETITION_IBFK_1);

        return _problem;
    }

    /**
     * Get the implicit join path to the <code>koj.competition</code> table.
     */
    public Competition competition() {
        if (_competition == null)
            _competition = new Competition(this, Keys.PROBLEM_BELONG_COMPETITION_IBFK_2);

        return _competition;
    }

    @Override
    public ProblemBelongCompetition as(String alias) {
        return new ProblemBelongCompetition(DSL.name(alias), this);
    }

    @Override
    public ProblemBelongCompetition as(Name alias) {
        return new ProblemBelongCompetition(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProblemBelongCompetition rename(String name) {
        return new ProblemBelongCompetition(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProblemBelongCompetition rename(Name name) {
        return new ProblemBelongCompetition(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Byte, Long, Long, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
