/*
 * This file is generated by jOOQ.
 */
package com.kairlec.koj.dao.tables.records;


import com.kairlec.koj.dao.tables.ProblemBelongCompetition;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * 题目和比赛关系表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProblemBelongCompetitionRecord extends UpdatableRecordImpl<ProblemBelongCompetitionRecord> implements Record5<Byte, Long, Long, LocalDateTime, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>koj.problem_belong_competition.idx</code>. 题目在比赛中的序号
     */
    public ProblemBelongCompetitionRecord setIdx(Byte value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>koj.problem_belong_competition.idx</code>. 题目在比赛中的序号
     */
    public Byte getIdx() {
        return (Byte) get(0);
    }

    /**
     * Setter for <code>koj.problem_belong_competition.problem_id</code>. 题目id
     */
    public ProblemBelongCompetitionRecord setProblemId(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>koj.problem_belong_competition.problem_id</code>. 题目id
     */
    public Long getProblemId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>koj.problem_belong_competition.competition_id</code>.
     * 比赛id
     */
    public ProblemBelongCompetitionRecord setCompetitionId(Long value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>koj.problem_belong_competition.competition_id</code>.
     * 比赛id
     */
    public Long getCompetitionId() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>koj.problem_belong_competition.create_time</code>. 创建时间
     */
    public ProblemBelongCompetitionRecord setCreateTime(LocalDateTime value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>koj.problem_belong_competition.create_time</code>. 创建时间
     */
    public LocalDateTime getCreateTime() {
        return (LocalDateTime) get(3);
    }

    /**
     * Setter for <code>koj.problem_belong_competition.update_time</code>. 更新时间
     */
    public ProblemBelongCompetitionRecord setUpdateTime(LocalDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>koj.problem_belong_competition.update_time</code>. 更新时间
     */
    public LocalDateTime getUpdateTime() {
        return (LocalDateTime) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Long, Long> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Byte, Long, Long, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Byte, Long, Long, LocalDateTime, LocalDateTime> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Byte> field1() {
        return ProblemBelongCompetition.PROBLEM_BELONG_COMPETITION.IDX;
    }

    @Override
    public Field<Long> field2() {
        return ProblemBelongCompetition.PROBLEM_BELONG_COMPETITION.PROBLEM_ID;
    }

    @Override
    public Field<Long> field3() {
        return ProblemBelongCompetition.PROBLEM_BELONG_COMPETITION.COMPETITION_ID;
    }

    @Override
    public Field<LocalDateTime> field4() {
        return ProblemBelongCompetition.PROBLEM_BELONG_COMPETITION.CREATE_TIME;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return ProblemBelongCompetition.PROBLEM_BELONG_COMPETITION.UPDATE_TIME;
    }

    @Override
    public Byte component1() {
        return getIdx();
    }

    @Override
    public Long component2() {
        return getProblemId();
    }

    @Override
    public Long component3() {
        return getCompetitionId();
    }

    @Override
    public LocalDateTime component4() {
        return getCreateTime();
    }

    @Override
    public LocalDateTime component5() {
        return getUpdateTime();
    }

    @Override
    public Byte value1() {
        return getIdx();
    }

    @Override
    public Long value2() {
        return getProblemId();
    }

    @Override
    public Long value3() {
        return getCompetitionId();
    }

    @Override
    public LocalDateTime value4() {
        return getCreateTime();
    }

    @Override
    public LocalDateTime value5() {
        return getUpdateTime();
    }

    @Override
    public ProblemBelongCompetitionRecord value1(Byte value) {
        setIdx(value);
        return this;
    }

    @Override
    public ProblemBelongCompetitionRecord value2(Long value) {
        setProblemId(value);
        return this;
    }

    @Override
    public ProblemBelongCompetitionRecord value3(Long value) {
        setCompetitionId(value);
        return this;
    }

    @Override
    public ProblemBelongCompetitionRecord value4(LocalDateTime value) {
        setCreateTime(value);
        return this;
    }

    @Override
    public ProblemBelongCompetitionRecord value5(LocalDateTime value) {
        setUpdateTime(value);
        return this;
    }

    @Override
    public ProblemBelongCompetitionRecord values(Byte value1, Long value2, Long value3, LocalDateTime value4, LocalDateTime value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ProblemBelongCompetitionRecord
     */
    public ProblemBelongCompetitionRecord() {
        super(ProblemBelongCompetition.PROBLEM_BELONG_COMPETITION);
    }

    /**
     * Create a detached, initialised ProblemBelongCompetitionRecord
     */
    public ProblemBelongCompetitionRecord(Byte idx, Long problemId, Long competitionId, LocalDateTime createTime, LocalDateTime updateTime) {
        super(ProblemBelongCompetition.PROBLEM_BELONG_COMPETITION);

        setIdx(idx);
        setProblemId(problemId);
        setCompetitionId(competitionId);
        setCreateTime(createTime);
        setUpdateTime(updateTime);
    }

    /**
     * Create a detached, initialised ProblemBelongCompetitionRecord
     */
    public ProblemBelongCompetitionRecord(com.kairlec.koj.dao.tables.pojos.ProblemBelongCompetition value) {
        super(ProblemBelongCompetition.PROBLEM_BELONG_COMPETITION);

        if (value != null) {
            setIdx(value.getIdx());
            setProblemId(value.getProblemId());
            setCompetitionId(value.getCompetitionId());
            setCreateTime(value.getCreateTime());
            setUpdateTime(value.getUpdateTime());
        }
    }
}
