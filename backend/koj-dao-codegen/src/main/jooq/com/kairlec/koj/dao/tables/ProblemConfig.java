/*
 * This file is generated by jOOQ.
 */
package com.kairlec.koj.dao.tables;


import com.kairlec.koj.dao.Indexes;
import com.kairlec.koj.dao.Keys;
import com.kairlec.koj.dao.Koj;
import com.kairlec.koj.dao.tables.records.ProblemConfigRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 题目语言配置表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProblemConfig extends TableImpl<ProblemConfigRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>koj.problem_config</code>
     */
    public static final ProblemConfig PROBLEM_CONFIG = new ProblemConfig();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProblemConfigRecord> getRecordType() {
        return ProblemConfigRecord.class;
    }

    /**
     * The column <code>koj.problem_config.problem_id</code>. 题目id
     */
    public final TableField<ProblemConfigRecord, Long> PROBLEM_ID = createField(DSL.name("problem_id"), SQLDataType.BIGINT.nullable(false), this, "题目id");

    /**
     * The column <code>koj.problem_config.language_id</code>. 语言id
     */
    public final TableField<ProblemConfigRecord, String> LANGUAGE_ID = createField(DSL.name("language_id"), SQLDataType.VARCHAR(64).nullable(false), this, "语言id");

    /**
     * The column <code>koj.problem_config.memory</code>. 内存限制
     */
    public final TableField<ProblemConfigRecord, Integer> MEMORY = createField(DSL.name("memory"), SQLDataType.INTEGER.nullable(false), this, "内存限制");

    /**
     * The column <code>koj.problem_config.time</code>. 时间限制
     */
    public final TableField<ProblemConfigRecord, Integer> TIME = createField(DSL.name("time"), SQLDataType.INTEGER.nullable(false), this, "时间限制");

    /**
     * The column <code>koj.problem_config.create_time</code>. 创建时间
     */
    public final TableField<ProblemConfigRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "创建时间");

    /**
     * The column <code>koj.problem_config.update_time</code>. 更新时间
     */
    public final TableField<ProblemConfigRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "更新时间");

    private ProblemConfig(Name alias, Table<ProblemConfigRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProblemConfig(Name alias, Table<ProblemConfigRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("题目语言配置表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>koj.problem_config</code> table reference
     */
    public ProblemConfig(String alias) {
        this(DSL.name(alias), PROBLEM_CONFIG);
    }

    /**
     * Create an aliased <code>koj.problem_config</code> table reference
     */
    public ProblemConfig(Name alias) {
        this(alias, PROBLEM_CONFIG);
    }

    /**
     * Create a <code>koj.problem_config</code> table reference
     */
    public ProblemConfig() {
        this(DSL.name("problem_config"), null);
    }

    public <O extends Record> ProblemConfig(Table<O> child, ForeignKey<O, ProblemConfigRecord> key) {
        super(child, key, PROBLEM_CONFIG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Koj.KOJ;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PROBLEM_CONFIG_LANGUAGE_ID_IDX, Indexes.PROBLEM_CONFIG_PROBLEM_ID_IDX);
    }

    @Override
    public UniqueKey<ProblemConfigRecord> getPrimaryKey() {
        return Keys.KEY_PROBLEM_CONFIG_PRIMARY;
    }

    @Override
    public List<ForeignKey<ProblemConfigRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONFIG_PROBLEM_ID_FK);
    }

    private transient Problem _problem;

    /**
     * Get the implicit join path to the <code>koj.problem</code> table.
     */
    public Problem problem() {
        if (_problem == null)
            _problem = new Problem(this, Keys.CONFIG_PROBLEM_ID_FK);

        return _problem;
    }

    @Override
    public ProblemConfig as(String alias) {
        return new ProblemConfig(DSL.name(alias), this);
    }

    @Override
    public ProblemConfig as(Name alias) {
        return new ProblemConfig(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProblemConfig rename(String name) {
        return new ProblemConfig(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProblemConfig rename(Name name) {
        return new ProblemConfig(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, Integer, Integer, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
