/*
 * This file is generated by jOOQ.
 */
package com.kairlec.koj.dao.tables.records;


import com.kairlec.koj.dao.tables.Task;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * 任务表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskRecord extends UpdatableRecordImpl<TaskRecord> implements Record8<Long, Long, Byte, Integer, Integer, Long, LocalDateTime, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>koj.task.id</code>. 任务id
     */
    public TaskRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>koj.task.id</code>. 任务id
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>koj.task.type</code>. 任务类型
     */
    public TaskRecord setType(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>koj.task.type</code>. 任务类型
     */
    public Long getType() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>koj.task.state</code>. 任务状态
     */
    public TaskRecord setState(Byte value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>koj.task.state</code>. 任务状态
     */
    public Byte getState() {
        return (Byte) get(2);
    }

    /**
     * Setter for <code>koj.task.cast_memory</code>. 任务内存
     */
    public TaskRecord setCastMemory(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>koj.task.cast_memory</code>. 任务内存
     */
    public Integer getCastMemory() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>koj.task.cast_time</code>. 耗时
     */
    public TaskRecord setCastTime(Integer value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>koj.task.cast_time</code>. 耗时
     */
    public Integer getCastTime() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>koj.task.belong_competition_id</code>. 所属比赛id
     */
    public TaskRecord setBelongCompetitionId(Long value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>koj.task.belong_competition_id</code>. 所属比赛id
     */
    public Long getBelongCompetitionId() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>koj.task.create_time</code>. 创建时间
     */
    public TaskRecord setCreateTime(LocalDateTime value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>koj.task.create_time</code>. 创建时间
     */
    public LocalDateTime getCreateTime() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for <code>koj.task.update_time</code>. 更新时间
     */
    public TaskRecord setUpdateTime(LocalDateTime value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>koj.task.update_time</code>. 更新时间
     */
    public LocalDateTime getUpdateTime() {
        return (LocalDateTime) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Long, Byte, Integer, Integer, Long, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Long, Long, Byte, Integer, Integer, Long, LocalDateTime, LocalDateTime> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Task.TASK.ID;
    }

    @Override
    public Field<Long> field2() {
        return Task.TASK.TYPE;
    }

    @Override
    public Field<Byte> field3() {
        return Task.TASK.STATE;
    }

    @Override
    public Field<Integer> field4() {
        return Task.TASK.CAST_MEMORY;
    }

    @Override
    public Field<Integer> field5() {
        return Task.TASK.CAST_TIME;
    }

    @Override
    public Field<Long> field6() {
        return Task.TASK.BELONG_COMPETITION_ID;
    }

    @Override
    public Field<LocalDateTime> field7() {
        return Task.TASK.CREATE_TIME;
    }

    @Override
    public Field<LocalDateTime> field8() {
        return Task.TASK.UPDATE_TIME;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getType();
    }

    @Override
    public Byte component3() {
        return getState();
    }

    @Override
    public Integer component4() {
        return getCastMemory();
    }

    @Override
    public Integer component5() {
        return getCastTime();
    }

    @Override
    public Long component6() {
        return getBelongCompetitionId();
    }

    @Override
    public LocalDateTime component7() {
        return getCreateTime();
    }

    @Override
    public LocalDateTime component8() {
        return getUpdateTime();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getType();
    }

    @Override
    public Byte value3() {
        return getState();
    }

    @Override
    public Integer value4() {
        return getCastMemory();
    }

    @Override
    public Integer value5() {
        return getCastTime();
    }

    @Override
    public Long value6() {
        return getBelongCompetitionId();
    }

    @Override
    public LocalDateTime value7() {
        return getCreateTime();
    }

    @Override
    public LocalDateTime value8() {
        return getUpdateTime();
    }

    @Override
    public TaskRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public TaskRecord value2(Long value) {
        setType(value);
        return this;
    }

    @Override
    public TaskRecord value3(Byte value) {
        setState(value);
        return this;
    }

    @Override
    public TaskRecord value4(Integer value) {
        setCastMemory(value);
        return this;
    }

    @Override
    public TaskRecord value5(Integer value) {
        setCastTime(value);
        return this;
    }

    @Override
    public TaskRecord value6(Long value) {
        setBelongCompetitionId(value);
        return this;
    }

    @Override
    public TaskRecord value7(LocalDateTime value) {
        setCreateTime(value);
        return this;
    }

    @Override
    public TaskRecord value8(LocalDateTime value) {
        setUpdateTime(value);
        return this;
    }

    @Override
    public TaskRecord values(Long value1, Long value2, Byte value3, Integer value4, Integer value5, Long value6, LocalDateTime value7, LocalDateTime value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TaskRecord
     */
    public TaskRecord() {
        super(Task.TASK);
    }

    /**
     * Create a detached, initialised TaskRecord
     */
    public TaskRecord(Long id, Long type, Byte state, Integer castMemory, Integer castTime, Long belongCompetitionId, LocalDateTime createTime, LocalDateTime updateTime) {
        super(Task.TASK);

        setId(id);
        setType(type);
        setState(state);
        setCastMemory(castMemory);
        setCastTime(castTime);
        setBelongCompetitionId(belongCompetitionId);
        setCreateTime(createTime);
        setUpdateTime(updateTime);
    }

    /**
     * Create a detached, initialised TaskRecord
     */
    public TaskRecord(com.kairlec.koj.dao.tables.pojos.Task value) {
        super(Task.TASK);

        if (value != null) {
            setId(value.getId());
            setType(value.getType());
            setState(value.getState());
            setCastMemory(value.getCastMemory());
            setCastTime(value.getCastTime());
            setBelongCompetitionId(value.getBelongCompetitionId());
            setCreateTime(value.getCreateTime());
            setUpdateTime(value.getUpdateTime());
        }
    }
}
