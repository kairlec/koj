/*
 * This file is generated by jOOQ.
 */
package com.kairlec.koj.dao.tables.records;


import com.kairlec.koj.dao.tables.ProblemRun;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * 题目运行内容表(非spj)
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProblemRunRecord extends UpdatableRecordImpl<ProblemRunRecord> implements Record5<Long, String, String, LocalDateTime, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>koj.problem_run.id</code>. 题目id
     */
    public ProblemRunRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>koj.problem_run.id</code>. 题目id
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>koj.problem_run.stdin</code>. 输入
     */
    public ProblemRunRecord setStdin(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>koj.problem_run.stdin</code>. 输入
     */
    public String getStdin() {
        return (String) get(1);
    }

    /**
     * Setter for <code>koj.problem_run.ansout</code>. 答案输出(用于)
     */
    public ProblemRunRecord setAnsout(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>koj.problem_run.ansout</code>. 答案输出(用于)
     */
    public String getAnsout() {
        return (String) get(2);
    }

    /**
     * Setter for <code>koj.problem_run.create_time</code>. 创建时间
     */
    public ProblemRunRecord setCreateTime(LocalDateTime value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>koj.problem_run.create_time</code>. 创建时间
     */
    public LocalDateTime getCreateTime() {
        return (LocalDateTime) get(3);
    }

    /**
     * Setter for <code>koj.problem_run.update_time</code>. 更新时间
     */
    public ProblemRunRecord setUpdateTime(LocalDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>koj.problem_run.update_time</code>. 更新时间
     */
    public LocalDateTime getUpdateTime() {
        return (LocalDateTime) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Long, String, String, LocalDateTime, LocalDateTime> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return ProblemRun.PROBLEM_RUN.ID;
    }

    @Override
    public Field<String> field2() {
        return ProblemRun.PROBLEM_RUN.STDIN;
    }

    @Override
    public Field<String> field3() {
        return ProblemRun.PROBLEM_RUN.ANSOUT;
    }

    @Override
    public Field<LocalDateTime> field4() {
        return ProblemRun.PROBLEM_RUN.CREATE_TIME;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return ProblemRun.PROBLEM_RUN.UPDATE_TIME;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getStdin();
    }

    @Override
    public String component3() {
        return getAnsout();
    }

    @Override
    public LocalDateTime component4() {
        return getCreateTime();
    }

    @Override
    public LocalDateTime component5() {
        return getUpdateTime();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getStdin();
    }

    @Override
    public String value3() {
        return getAnsout();
    }

    @Override
    public LocalDateTime value4() {
        return getCreateTime();
    }

    @Override
    public LocalDateTime value5() {
        return getUpdateTime();
    }

    @Override
    public ProblemRunRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public ProblemRunRecord value2(String value) {
        setStdin(value);
        return this;
    }

    @Override
    public ProblemRunRecord value3(String value) {
        setAnsout(value);
        return this;
    }

    @Override
    public ProblemRunRecord value4(LocalDateTime value) {
        setCreateTime(value);
        return this;
    }

    @Override
    public ProblemRunRecord value5(LocalDateTime value) {
        setUpdateTime(value);
        return this;
    }

    @Override
    public ProblemRunRecord values(Long value1, String value2, String value3, LocalDateTime value4, LocalDateTime value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ProblemRunRecord
     */
    public ProblemRunRecord() {
        super(ProblemRun.PROBLEM_RUN);
    }

    /**
     * Create a detached, initialised ProblemRunRecord
     */
    public ProblemRunRecord(Long id, String stdin, String ansout, LocalDateTime createTime, LocalDateTime updateTime) {
        super(ProblemRun.PROBLEM_RUN);

        setId(id);
        setStdin(stdin);
        setAnsout(ansout);
        setCreateTime(createTime);
        setUpdateTime(updateTime);
    }

    /**
     * Create a detached, initialised ProblemRunRecord
     */
    public ProblemRunRecord(com.kairlec.koj.dao.tables.pojos.ProblemRun value) {
        super(ProblemRun.PROBLEM_RUN);

        if (value != null) {
            setId(value.getId());
            setStdin(value.getStdin());
            setAnsout(value.getAnsout());
            setCreateTime(value.getCreateTime());
            setUpdateTime(value.getUpdateTime());
        }
    }
}
