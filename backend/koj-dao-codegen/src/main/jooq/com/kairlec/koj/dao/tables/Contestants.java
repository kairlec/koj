/*
 * This file is generated by jOOQ.
 */
package com.kairlec.koj.dao.tables;


import com.kairlec.koj.dao.Indexes;
import com.kairlec.koj.dao.Keys;
import com.kairlec.koj.dao.Koj;
import com.kairlec.koj.dao.tables.records.ContestantsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 参赛者关系表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Contestants extends TableImpl<ContestantsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>koj.contestants</code>
     */
    public static final Contestants CONTESTANTS = new Contestants();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ContestantsRecord> getRecordType() {
        return ContestantsRecord.class;
    }

    /**
     * The column <code>koj.contestants.user_id</code>. 用户id
     */
    public final TableField<ContestantsRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "用户id");

    /**
     * The column <code>koj.contestants.competition_id</code>. 比赛id
     */
    public final TableField<ContestantsRecord, Long> COMPETITION_ID = createField(DSL.name("competition_id"), SQLDataType.BIGINT.nullable(false), this, "比赛id");

    /**
     * The column <code>koj.contestants.create_time</code>. 创建时间
     */
    public final TableField<ContestantsRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "创建时间");

    /**
     * The column <code>koj.contestants.update_time</code>. 更新时间
     */
    public final TableField<ContestantsRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "更新时间");

    private Contestants(Name alias, Table<ContestantsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Contestants(Name alias, Table<ContestantsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("参赛者关系表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>koj.contestants</code> table reference
     */
    public Contestants(String alias) {
        this(DSL.name(alias), CONTESTANTS);
    }

    /**
     * Create an aliased <code>koj.contestants</code> table reference
     */
    public Contestants(Name alias) {
        this(alias, CONTESTANTS);
    }

    /**
     * Create a <code>koj.contestants</code> table reference
     */
    public Contestants() {
        this(DSL.name("contestants"), null);
    }

    public <O extends Record> Contestants(Table<O> child, ForeignKey<O, ContestantsRecord> key) {
        super(child, key, CONTESTANTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Koj.KOJ;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CONTESTANTS_COMPETITION_ID_IDX, Indexes.CONTESTANTS_USER_ID_IDX);
    }

    @Override
    public UniqueKey<ContestantsRecord> getPrimaryKey() {
        return Keys.KEY_CONTESTANTS_PRIMARY;
    }

    @Override
    public List<ForeignKey<ContestantsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_ID_FK, Keys.COMPETITION_ID_FK);
    }

    private transient User _user;
    private transient Competition _competition;

    /**
     * Get the implicit join path to the <code>koj.user</code> table.
     */
    public User user() {
        if (_user == null)
            _user = new User(this, Keys.USER_ID_FK);

        return _user;
    }

    /**
     * Get the implicit join path to the <code>koj.competition</code> table.
     */
    public Competition competition() {
        if (_competition == null)
            _competition = new Competition(this, Keys.COMPETITION_ID_FK);

        return _competition;
    }

    @Override
    public Contestants as(String alias) {
        return new Contestants(DSL.name(alias), this);
    }

    @Override
    public Contestants as(Name alias) {
        return new Contestants(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Contestants rename(String name) {
        return new Contestants(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Contestants rename(Name name) {
        return new Contestants(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
