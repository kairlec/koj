/*
 * This file is generated by jOOQ.
 */
package com.kairlec.koj.dao.tables;


import com.kairlec.koj.dao.Indexes;
import com.kairlec.koj.dao.Keys;
import com.kairlec.koj.dao.Koj;
import com.kairlec.koj.dao.tables.records.TagBelongProblemRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 题目标签关系表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TagBelongProblem extends TableImpl<TagBelongProblemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>koj.tag_belong_problem</code>
     */
    public static final TagBelongProblem TAG_BELONG_PROBLEM = new TagBelongProblem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TagBelongProblemRecord> getRecordType() {
        return TagBelongProblemRecord.class;
    }

    /**
     * The column <code>koj.tag_belong_problem.problem_id</code>. 题目id
     */
    public final TableField<TagBelongProblemRecord, Long> PROBLEM_ID = createField(DSL.name("problem_id"), SQLDataType.BIGINT.nullable(false), this, "题目id");

    /**
     * The column <code>koj.tag_belong_problem.tag_id</code>. 标签id
     */
    public final TableField<TagBelongProblemRecord, Long> TAG_ID = createField(DSL.name("tag_id"), SQLDataType.BIGINT.nullable(false), this, "标签id");

    /**
     * The column <code>koj.tag_belong_problem.create_time</code>. 创建时间
     */
    public final TableField<TagBelongProblemRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>koj.tag_belong_problem.update_time</code>. 更新时间
     */
    public final TableField<TagBelongProblemRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "更新时间");

    private TagBelongProblem(Name alias, Table<TagBelongProblemRecord> aliased) {
        this(alias, aliased, null);
    }

    private TagBelongProblem(Name alias, Table<TagBelongProblemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("题目标签关系表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>koj.tag_belong_problem</code> table reference
     */
    public TagBelongProblem(String alias) {
        this(DSL.name(alias), TAG_BELONG_PROBLEM);
    }

    /**
     * Create an aliased <code>koj.tag_belong_problem</code> table reference
     */
    public TagBelongProblem(Name alias) {
        this(alias, TAG_BELONG_PROBLEM);
    }

    /**
     * Create a <code>koj.tag_belong_problem</code> table reference
     */
    public TagBelongProblem() {
        this(DSL.name("tag_belong_problem"), null);
    }

    public <O extends Record> TagBelongProblem(Table<O> child, ForeignKey<O, TagBelongProblemRecord> key) {
        super(child, key, TAG_BELONG_PROBLEM);
    }

    @Override
    public Schema getSchema() {
        return Koj.KOJ;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TAG_BELONG_PROBLEM_PROBLEM_ID_IDX, Indexes.TAG_BELONG_PROBLEM_TAG_ID_IDX);
    }

    @Override
    public UniqueKey<TagBelongProblemRecord> getPrimaryKey() {
        return Keys.KEY_TAG_BELONG_PROBLEM_PRIMARY;
    }

    @Override
    public List<UniqueKey<TagBelongProblemRecord>> getKeys() {
        return Arrays.<UniqueKey<TagBelongProblemRecord>>asList(Keys.KEY_TAG_BELONG_PROBLEM_PRIMARY);
    }

    @Override
    public List<ForeignKey<TagBelongProblemRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TagBelongProblemRecord, ?>>asList(Keys.PROBLEM_ID_FK, Keys.TAG_ID_FK);
    }

    private transient Problem _problem;
    private transient ProblemTag _problemTag;

    public Problem problem() {
        if (_problem == null)
            _problem = new Problem(this, Keys.PROBLEM_ID_FK);

        return _problem;
    }

    public ProblemTag problemTag() {
        if (_problemTag == null)
            _problemTag = new ProblemTag(this, Keys.TAG_ID_FK);

        return _problemTag;
    }

    @Override
    public TagBelongProblem as(String alias) {
        return new TagBelongProblem(DSL.name(alias), this);
    }

    @Override
    public TagBelongProblem as(Name alias) {
        return new TagBelongProblem(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TagBelongProblem rename(String name) {
        return new TagBelongProblem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TagBelongProblem rename(Name name) {
        return new TagBelongProblem(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
